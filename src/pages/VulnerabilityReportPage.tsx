import { useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import { FileText, Download, AlertTriangle, ChevronDown, ChevronRight, ExternalLink, Shield, GitBranch } from 'lucide-react';
import { GlassmorphicLayout } from '../components/GlassmorphicLayout';
import { GlassmorphicNav } from '../components/GlassmorphicNav';
import { GlassmorphicCard, GlassmorphicCardHeader, GlassmorphicCardContent } from '../components/GlassmorphicCard';
import { Badge } from '../components/ui/badge';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '../components/ui/collapsible';
import { mockVulnerabilities } from '../utils/mockData';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { motion } from 'motion/react';

export function VulnerabilityReportPage() {
  const { scanId } = useParams();
  const [expandedVuln, setExpandedVuln] = useState<string | null>(null);
  const [severityFilter, setSeverityFilter] = useState('all');
  const [componentFilter, setComponentFilter] = useState('all');

  const filteredVulns = mockVulnerabilities.filter(vuln => {
    if (severityFilter !== 'all' && vuln.severity !== severityFilter) return false;
    if (componentFilter !== 'all' && !vuln.affectedComponent.toLowerCase().includes(componentFilter.toLowerCase())) return false;
    return true;
  });

  const getSeverityColor = (severity: string) => {
    const colors: Record<string, string> = {
      critical: 'bg-red-600',
      high: 'bg-orange-600',
      medium: 'bg-yellow-600',
      low: 'bg-blue-600',
    };
    return colors[severity] || 'bg-gray-600';
  };

  const getCVSSColor = (score: number) => {
    if (score >= 9.0) return 'text-red-400';
    if (score >= 7.0) return 'text-orange-400';
    if (score >= 4.0) return 'text-yellow-400';
    return 'text-blue-400';
  };

  const handleExport = (format: string) => {
    console.log(`Exporting report as ${format}`);
  };

  return (
    <GlassmorphicLayout>
      <GlassmorphicNav />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <motion.div 
          className="mb-8"
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.6 }}
        >
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-3xl mb-2 text-white">Vulnerability Report</h1>
              <p className="text-white/60">Scan ID: {scanId} • Target: example.com</p>
            </div>
            <div className="flex gap-2">
              <Link to={`/attack-path/${scanId}`}>
                <motion.button 
                  className="px-4 py-2 bg-white/5 backdrop-blur-xl rounded-full border border-white/10 text-white hover:bg-white/10 transition-all shadow-lg flex items-center gap-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <GitBranch className="h-4 w-4" />
                  View Attack Paths
                </motion.button>
              </Link>
              <motion.button 
                className="px-4 py-2 bg-white/5 backdrop-blur-xl rounded-full border border-white/10 text-white hover:bg-white/10 transition-all shadow-lg flex items-center gap-2"
                onClick={() => handleExport('pdf')}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Download className="h-4 w-4" />
                Export PDF
              </motion.button>
            </div>
          </div>
        </motion.div>

        {/* Summary Cards */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-8">
          <GlassmorphicCard>
            <GlassmorphicCardContent className="pt-6">
              <div className="text-2xl mb-1 text-white">{mockVulnerabilities.length}</div>
              <div className="text-sm text-white/60">Total Vulnerabilities</div>
            </GlassmorphicCardContent>
          </GlassmorphicCard>
          <GlassmorphicCard>
            <GlassmorphicCardContent className="pt-6">
              <div className="text-2xl mb-1 text-red-400">
                {mockVulnerabilities.filter(v => v.severity === 'critical').length}
              </div>
              <div className="text-sm text-white/60">Critical</div>
            </GlassmorphicCardContent>
          </GlassmorphicCard>
          <GlassmorphicCard>
            <GlassmorphicCardContent className="pt-6">
              <div className="text-2xl mb-1 text-orange-400">
                {mockVulnerabilities.filter(v => v.severity === 'high').length}
              </div>
              <div className="text-sm text-white/60">High</div>
            </GlassmorphicCardContent>
          </GlassmorphicCard>
          <GlassmorphicCard>
            <GlassmorphicCardContent className="pt-6">
              <div className="text-2xl mb-1 text-yellow-400">
                {mockVulnerabilities.filter(v => v.severity === 'medium').length}
              </div>
              <div className="text-sm text-white/60">Medium</div>
            </GlassmorphicCardContent>
          </GlassmorphicCard>
          <GlassmorphicCard>
            <GlassmorphicCardContent className="pt-6">
              <div className="text-2xl mb-1 text-blue-400">
                {mockVulnerabilities.filter(v => v.severity === 'low').length}
              </div>
              <div className="text-sm text-white/60">Low</div>
            </GlassmorphicCardContent>
          </GlassmorphicCard>
        </div>

        {/* Filters */}
        <GlassmorphicCard className="mb-6">
          <GlassmorphicCardContent className="pt-6">
            <div className="flex items-center gap-4">
              <Select value={severityFilter} onValueChange={setSeverityFilter}>
                <SelectTrigger className="w-48 bg-white/5 border-white/10 text-white">
                  <SelectValue placeholder="Filter by Severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Severities</SelectItem>
                  <SelectItem value="critical">Critical</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="low">Low</SelectItem>
                </SelectContent>
              </Select>
              
              <Select value={componentFilter} onValueChange={setComponentFilter}>
                <SelectTrigger className="w-48 bg-white/5 border-white/10 text-white">
                  <SelectValue placeholder="Filter by Component" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Components</SelectItem>
                  <SelectItem value="apache">Apache</SelectItem>
                  <SelectItem value="mysql">MySQL</SelectItem>
                  <SelectItem value="web">Web Application</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </GlassmorphicCardContent>
        </GlassmorphicCard>

        {/* Vulnerabilities List */}
        <GlassmorphicCard>
          <GlassmorphicCardHeader>
            <h2 className="text-xl text-white">Vulnerability Details</h2>
          </GlassmorphicCardHeader>
          <GlassmorphicCardContent>
            <div className="space-y-4">
              {filteredVulns.map((vuln) => (
                <Collapsible
                  key={vuln.id}
                  open={expandedVuln === vuln.id}
                  onOpenChange={(open) => setExpandedVuln(open ? vuln.id : null)}
                >
                  <div className="bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 overflow-hidden">
                    <CollapsibleTrigger className="w-full">
                      <div className="p-5">
                        <div className="flex items-start justify-between">
                          <div className="flex items-start gap-4 flex-1">
                            {expandedVuln === vuln.id ? (
                              <ChevronDown className="h-5 w-5 mt-1 flex-shrink-0 text-white" />
                            ) : (
                              <ChevronRight className="h-5 w-5 mt-1 flex-shrink-0 text-white" />
                            )}
                            <div className="flex-1 text-left">
                              <div className="flex items-center gap-3 mb-2">
                                <h3 className="text-white">{vuln.title}</h3>
                                <Badge className={`${getSeverityColor(vuln.severity)} text-white border-0`}>
                                  {vuln.severity.toUpperCase()}
                                </Badge>
                                <Badge className="bg-white/10 text-white border-white/20">{vuln.cveId}</Badge>
                                {vuln.exploitAvailable && (
                                  <Badge className="bg-red-500/20 text-red-300 border-red-500/30">
                                    Exploit Available
                                  </Badge>
                                )}
                              </div>
                              <div className="flex items-center gap-4 text-sm text-white/60">
                                <span className={`font-medium ${getCVSSColor(vuln.cvssScore)}`}>
                                  CVSS {vuln.cvssScore}
                                </span>
                                <span>•</span>
                                <span>{vuln.affectedComponent}</span>
                                {vuln.port && (
                                  <>
                                    <span>•</span>
                                    <span>Port {vuln.port} ({vuln.service})</span>
                                  </>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CollapsibleTrigger>

                    <CollapsibleContent>
                      <div className="px-5 pb-5 pl-14 space-y-4 border-t border-white/5 pt-4">
                        <div>
                          <h4 className="text-white/80 mb-2">Description</h4>
                          <p className="text-sm text-white/60">{vuln.description}</p>
                        </div>

                        {vuln.exploitSteps && vuln.exploitSteps.length > 0 && (
                          <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-4">
                            <div className="flex items-center gap-2 mb-2">
                              <AlertTriangle className="h-4 w-4 text-red-400" />
                              <h4 className="text-red-300">Exploit Steps</h4>
                            </div>
                            <ol className="list-decimal list-inside text-sm text-red-200 space-y-1">
                              {vuln.exploitSteps.map((step, idx) => (
                                <li key={idx}>{step}</li>
                              ))}
                            </ol>
                          </div>
                        )}

                        <div className="bg-gray-500/10 border border-gray-500/20 rounded-lg p-4">
                          <div className="flex items-center gap-2 mb-2">
                            <Shield className="h-4 w-4 text-gray-400" />
                            <h4 className="text-gray-300">Remediation</h4>
                          </div>
                          <p className="text-sm text-gray-200">{vuln.remediation}</p>
                        </div>

                        <div>
                          <h4 className="text-white/80 mb-2">References</h4>
                          <div className="space-y-1">
                            {vuln.references.map((ref, idx) => (
                              <a
                                key={idx}
                                href={ref}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="flex items-center gap-2 text-sm text-blue-400 hover:text-blue-300 transition-colors"
                              >
                                <ExternalLink className="h-3 w-3" />
                                {ref}
                              </a>
                            ))}
                          </div>
                        </div>
                      </div>
                    </CollapsibleContent>
                  </div>
                </Collapsible>
              ))}
            </div>
          </GlassmorphicCardContent>
        </GlassmorphicCard>
      </div>
    </GlassmorphicLayout>
  );
}
