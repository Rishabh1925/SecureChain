#!/usr/bin/env python3
"""
Smart Vulnerability Chatbot
Natural language processing for vulnerability analysis with LLM-like responses
"""

import json
import re
import sys
import os
import random
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SmartVulnerabilityChatbot:
    """Smart chatbot with natural language understanding for vulnerability analysis"""
    
    def __init__(self, knowledge_base_file: str):
        self.knowledge_base = self._load_knowledge_base(knowledge_base_file)
        self.conversation_history = []
        self.user_context = {}
        self.response_templates = self._load_response_templates()
        
    def _load_knowledge_base(self, kb_file: str) -> Dict:
        """Load knowledge base from JSON file"""
        try:
            with open(kb_file, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"Knowledge base file not found: {kb_file}")
            return self._create_default_kb()
        except json.JSONDecodeError:
            logger.error(f"Invalid JSON in knowledge base file: {kb_file}")
            return self._create_default_kb()
    
    def _create_default_kb(self) -> Dict:
        """Create default knowledge base"""
        return {
            'target_info': {'website': 'example.com', 'total_vulnerabilities': 0},
            'vulnerabilities': {},
            'recommendations': [],
            'severity_summary': {'Critical': 0, 'High': 0, 'Medium': 0, 'Low': 0}
        }
    
    def _load_response_templates(self) -> Dict:
        """Load natural response templates"""
        return {
            'greetings': [
                "Hey there! I'm your cybersecurity consultant, and I've got some insights about {website}.",
                "Hello! I just finished analyzing {website} and found some interesting security findings.",
                "Hi! I'm here to help you understand the security landscape of {website}.",
                "Welcome! I've been diving deep into {website}'s security posture."
            ],
            'critical_intros': [
                "Alright, let's talk about the serious stuff first.",
                "I need to be straight with you about some critical issues I found.",
                "Here's what's keeping me up at night about your security:",
                "Let me cut to the chase - we have some urgent security matters to discuss."
            ],
            'reassuring_phrases': [
                "Don't worry, these are all fixable!",
                "The good news is we can address all of these.",
                "I know it sounds scary, but I'll walk you through everything.",
                "Every problem has a solution, and I'm here to help you find it."
            ],
            'transition_phrases': [
                "Now, let me explain what this means for you...",
                "Here's the thing about this vulnerability...",
                "Let me break this down in simple terms...",
                "What you need to know is..."
            ]
        }
    
    def _extract_intent(self, user_message: str) -> Dict[str, Any]:
        """Extract user intent and entities from message"""
        message_lower = user_message.lower()
        
        intent_patterns = {
            'greeting': ['hello', 'hi', 'hey', 'start', 'help me'],
            'critical_inquiry': ['critical', 'urgent', 'severe', 'dangerous', 'worst', 'serious'],
            'vulnerability_specific': ['cve-', 'log4j', 'apache', 'ssh', 'sql injection', 'xss'],
            'remediation': ['fix', 'patch', 'update', 'solve', 'remediate', 'secure', 'protect'],
            'attack_scenario': ['attack', 'exploit', 'hack', 'breach', 'compromise', 'penetrate'],
            'prioritization': ['priority', 'first', 'order', 'important', 'sequence'],
            'explanation': ['explain', 'what is', 'tell me about', 'describe', 'how does'],
            'risk_assessment': ['risk', 'danger', 'threat', 'impact', 'consequences']
        }
        
        detected_intents = []
        confidence_scores = {}
        
        for intent, patterns in intent_patterns.items():
            matches = sum(1 for pattern in patterns if pattern in message_lower)
            if matches > 0:
                detected_intents.append(intent)
                confidence_scores[intent] = matches / len(patterns)
        
        # Extract specific entities
        entities = {
            'cve_mentioned': re.findall(r'cve-\d{4}-\d{4,}', message_lower),
            'severity_mentioned': [s for s in ['critical', 'high', 'medium', 'low'] if s in message_lower],
            'service_mentioned': [s for s in ['http', 'https', 'ssh', 'ftp', 'mysql'] if s in message_lower]
        }
        
        return {
            'primary_intent': detected_intents[0] if detected_intents else 'general_inquiry',
            'all_intents': detected_intents,
            'confidence_scores': confidence_scores,
            'entities': entities,
            'message_length': len(user_message.split()),
            'question_type': 'question' if '?' in user_message else 'statement'
        }
    
    def _generate_contextual_response(self, intent_analysis: Dict, user_message: str) -> str:
        """Generate contextual response based on intent analysis"""
        primary_intent = intent_analysis['primary_intent']
        entities = intent_analysis['entities']
        
        # Route to appropriate response generator
        if primary_intent == 'greeting':
            return self._generate_greeting_response()
        elif primary_intent == 'critical_inquiry':
            return self._generate_critical_response()
        elif primary_intent == 'vulnerability_specific':
            return self._generate_vulnerability_specific_response(entities, user_message)
        elif primary_intent == 'remediation':
            return self._generate_remediation_response(entities, user_message)
        elif primary_intent == 'attack_scenario':
            return self._generate_attack_scenario_response()
        elif primary_intent == 'prioritization':
            return self._generate_prioritization_response()
        elif primary_intent == 'explanation':
            return self._generate_explanation_response(user_message)
        elif primary_intent == 'risk_assessment':
            return self._generate_risk_assessment_response()
        else:
            return self._generate_general_response(user_message)
    
    def _generate_greeting_response(self) -> str:
        """Generate natural greeting response"""
        target = self.knowledge_base['target_info'].get('website', 'your website')
        total_vulns = self.knowledge_base['target_info'].get('total_vulnerabilities', 0)
        critical_count = self.knowledge_base['severity_summary'].get('Critical', 0)
        
        greeting = random.choice(self.response_templates['greetings']).format(website=target)
        
        if critical_count > 0:
            urgency = f"I found {critical_count} critical vulnerabilities that need your immediate attention! This is serious stuff."
        elif total_vulns > 0:
            urgency = f"I discovered {total_vulns} security issues that we should definitely address."
        else:
            urgency = "The good news is that your security posture looks pretty solid overall."
        
        capabilities = """
I'm here to help you understand these findings and guide you through fixing them. Think of me as your personal security advisor who speaks plain English, not tech jargon.

You can ask me things like:
• "What's the most dangerous vulnerability you found?"
• "How do I fix the critical security issues?"
• "What would happen if someone exploited these vulnerabilities?"
• "Which problems should I tackle first?"

Just talk to me naturally - I'm pretty good at understanding what you're looking for!"""
        
        return f"{greeting}\n\n{urgency}\n\n{capabilities}"
    
    def _generate_critical_response(self) -> str:
        """Generate response about critical vulnerabilities"""
        critical_vulns = {k: v for k, v in self.knowledge_base['vulnerabilities'].items() 
                         if v.get('severity') == 'Critical'}
        
        if not critical_vulns:
            return """Great news! I didn't find any critical vulnerabilities in your analysis. 

That means there are no "drop everything and fix this immediately" type of security issues. You're in a much better position than many websites I analyze.

However, you might still have some high or medium severity issues that are worth addressing. Want me to walk you through those instead?"""
        
        intro = random.choice(self.response_templates['critical_intros'])
        
        response = f"{intro}\n\n"
        
        for i, (vuln_id, vuln_data) in enumerate(critical_vulns.items(), 1):
            service = vuln_data.get('service', 'Unknown service')
            cvss = vuln_data.get('cvss', 'Unknown')
            description = vuln_data.get('description', 'No description available')
            
            response += f"**{i}. {vuln_id}** (CVSS Score: {cvss}/10)\n"
            response += f"   This affects your {service} service. Here's why it's concerning: {description}\n"
            response += f"   In simple terms: An attacker could potentially gain complete control of your system through this vulnerability.\n\n"
        
        reassurance = random.choice(self.response_templates['reassuring_phrases'])
        response += f"{reassurance} Want me to walk you through exactly how to fix these vulnerabilities?"
        
        return response
    
    def _generate_vulnerability_specific_response(self, entities: Dict, user_message: str) -> str:
        """Generate response about specific vulnerabilities"""
        message_lower = user_message.lower()
        
        # Check for specific CVE mentions
        if entities['cve_mentioned']:
            cve = entities['cve_mentioned'][0].upper()
            return self._get_cve_details(cve)
        
        # Check for Log4j specific inquiry
        if 'log4j' in message_lower or '44228' in message_lower:
            return self._get_log4j_explanation()
        
        # Check for service-specific inquiries
        if entities['service_mentioned']:
            service = entities['service_mentioned'][0]
            return self._get_service_vulnerabilities(service)
        
        # General vulnerability explanation
        return self._get_general_vulnerability_overview()
    
    def _get_cve_details(self, cve: str) -> str:
        """Get detailed information about a specific CVE"""
        if cve in self.knowledge_base['vulnerabilities']:
            vuln = self.knowledge_base['vulnerabilities'][cve]
            
            return f"""Let me tell you about {cve} - this is definitely something you should know about.

**What it is:** {vuln.get('description', 'A security vulnerability')}

**Severity Level:** {vuln.get('severity', 'Unknown')} (CVSS Score: {vuln.get('cvss', 'N/A')}/10)

**What's at risk:** Your {vuln.get('service', 'system')} service is vulnerable to this issue.

**Why you should care:** {self._explain_vulnerability_impact(vuln)}

**How to fix it:** {vuln.get('remediation', 'Contact your security team for specific remediation steps')}

The bottom line: This vulnerability should be addressed based on its {vuln.get('severity', 'unknown')} severity level. Want me to explain the technical details or help you prioritize this against other issues?"""
        else:
            return f"I didn't find {cve} in your current analysis results. This could mean either your system isn't affected by this particular vulnerability, or it wasn't detected in this scan. Want me to tell you about the vulnerabilities I did find instead?"
    
    def _get_log4j_explanation(self) -> str:
        """Explain Log4j vulnerability in detail"""
        has_log4j = 'CVE-2021-44228' in self.knowledge_base['vulnerabilities']
        
        if has_log4j:
            urgency = "I found this vulnerability in your system, and I need to be completely honest with you - this is a big deal."
        else:
            urgency = "Good news - I didn't detect this specific vulnerability in your current analysis, but let me explain why everyone's talking about it."
        
        return f"""Ah, Log4j - the vulnerability that made cybersecurity professionals around the world lose sleep! {urgency}

**What is Log4j anyway?**
Log4j is a Java logging library that's used in countless applications. Think of it like a universal diary that software uses to keep track of what's happening. The problem is, this "diary" is everywhere - web applications, enterprise software, even some smart devices.

**Why CVE-2021-44228 is so terrifying:**
- Attackers can execute any code they want on your server
- It's incredibly easy to exploit (just send a specially crafted string)
- It affects millions of applications worldwide
- It's been actively exploited since December 2021

**The real-world impact:**
This isn't theoretical - attackers have been using this vulnerability to install ransomware, steal data, and take over entire networks. It's like finding out that every lock in your building can be opened with the same master key, and that key is publicly available.

**If you have this vulnerability, here's your emergency action plan:**

1. **Update immediately** to Log4j version 2.17.0 or later
2. **Emergency workaround** (if you can't update right now): Remove the vulnerable JndiLookup class
3. **Set system property**: -Dlog4j2.formatMsgNoLookups=true
4. **Monitor your logs** for exploitation attempts

This isn't something you can put off until next week. Attackers have automated tools scanning for this vulnerability 24/7.

Need help with the technical implementation? I can walk you through each step!"""
    
    def _get_service_vulnerabilities(self, service: str) -> str:
        """Get vulnerabilities for a specific service"""
        service_vulns = {k: v for k, v in self.knowledge_base['vulnerabilities'].items() 
                        if v.get('service', '').lower() == service.lower()}
        
        if not service_vulns:
            return f"I didn't find any specific vulnerabilities affecting your {service} service in this analysis. That's actually good news! However, that doesn't mean it's completely secure - just that no major vulnerabilities were detected in this particular scan."
        
        response = f"Let me tell you about the {service.upper()} vulnerabilities I found:\n\n"
        
        for vuln_id, vuln_data in service_vulns.items():
            severity = vuln_data.get('severity', 'Unknown')
            cvss = vuln_data.get('cvss', 'N/A')
            description = vuln_data.get('description', 'No description available')
            
            response += f"**{vuln_id}** - {severity} Severity (CVSS: {cvss})\n"
            response += f"   Issue: {description}\n"
            response += f"   Impact: {self._explain_vulnerability_impact(vuln_data)}\n\n"
        
        response += f"These {service} vulnerabilities should be addressed to keep your service secure. Want me to explain how to fix any of these specifically?"
        
        return response
    
    def _explain_vulnerability_impact(self, vuln_data: Dict) -> str:
        """Explain the impact of a vulnerability in simple terms"""
        severity = vuln_data.get('severity', 'Unknown')
        service = vuln_data.get('service', 'system')
        
        impact_explanations = {
            'Critical': f"An attacker could potentially take complete control of your {service} and possibly your entire system.",
            'High': f"An attacker could cause significant damage to your {service} or steal sensitive information.",
            'Medium': f"An attacker could disrupt your {service} or gain unauthorized access to some data.",
            'Low': f"An attacker might be able to gather information about your {service} that could help in future attacks."
        }
        
        return impact_explanations.get(severity, "The impact depends on how an attacker might exploit this vulnerability.")
    
    def _generate_remediation_response(self, entities: Dict, user_message: str) -> str:
        """Generate remediation guidance"""
        message_lower = user_message.lower()
        
        # Check if asking about specific vulnerability
        if 'log4j' in message_lower:
            return self._get_log4j_remediation()
        
        # General remediation roadmap
        target = self.knowledge_base['target_info'].get('website', 'your website')
        severity_summary = self.knowledge_base['severity_summary']
        
        response = f"Absolutely! Let's create a security action plan for {target}. I'll break this down into manageable steps:\n\n"
        
        if severity_summary.get('Critical', 0) > 0:
            response += f"**🚨 IMMEDIATE ACTION REQUIRED** ({severity_summary['Critical']} critical issues)\n"
            response += "These are like having your front door wide open with a neon sign saying 'Rob Me'. Attackers are actively scanning for these vulnerabilities.\n"
            response += "**Timeline: Fix these TODAY.** I'm not exaggerating - these can't wait.\n\n"
        
        if severity_summary.get('High', 0) > 0:
            response += f"**🔥 HIGH PRIORITY** ({severity_summary['High']} high-severity issues)\n"
            response += "These are serious security gaps that skilled attackers could definitely exploit.\n"
            response += "**Timeline: Address within the next week.**\n\n"
        
        if severity_summary.get('Medium', 0) > 0:
            response += f"**⚠️ MEDIUM PRIORITY** ({severity_summary['Medium']} medium-severity issues)\n"
            response += "These won't cause immediate disasters, but they're still security weaknesses that should be addressed.\n"
            response += "**Timeline: Fix within the next month.**\n\n"
        
        response += "**My recommendation:** Start with the critical issues and work your way down. Each vulnerability you fix makes your system significantly more secure.\n\n"
        response += "Want me to dive deeper into how to fix any specific vulnerability? Just ask me about it and I'll give you step-by-step instructions!"
        
        return response
    
    def _get_log4j_remediation(self) -> str:
        """Specific Log4j remediation guidance"""
        return """Here's your step-by-step Log4j remediation plan. I'll make this as clear as possible:

**Step 1: Immediate Update (Recommended)**
- Update to Log4j version 2.17.0 or later
- This is the cleanest, most permanent fix
- Test in a development environment first if possible

**Step 2: Emergency Workaround (If you can't update immediately)**
If you absolutely cannot update right away, here's a temporary fix:
- Remove the vulnerable JndiLookup class from your log4j-core jar file
- Command: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`

**Step 3: System Property Fix**
- Add this JVM argument: `-Dlog4j2.formatMsgNoLookups=true`
- This disables the vulnerable lookup functionality

**Step 4: Verification**
- Check your application logs for any errors after applying fixes
- Monitor for any exploitation attempts in your logs
- Look for suspicious patterns containing "jndi" in your access logs

**Step 5: Long-term Security**
- Implement a Web Application Firewall (WAF) if you don't have one
- Set up log monitoring for future security events
- Establish a regular patching schedule

**Important Notes:**
- This vulnerability is being actively exploited, so speed matters
- The temporary workarounds are just that - temporary. Plan to update properly
- If you're not comfortable doing this yourself, get your IT team or a security professional involved immediately

Need help with any of these specific steps? I can walk you through the technical details!"""
    
    def _generate_attack_scenario_response(self) -> str:
        """Generate attack scenario explanation"""
        target = self.knowledge_base['target_info'].get('website', 'your website')
        critical_count = self.knowledge_base['severity_summary'].get('Critical', 0)
        
        if critical_count > 0:
            threat_level = "very real and immediate"
            opening = "I need to be completely honest with you about the current threat level"
        else:
            threat_level = "moderate but manageable"
            opening = "While you're not in immediate danger, let me explain what could happen"
        
        return f"""Let me paint you a realistic picture of how an attacker might target {target}. {opening} - the threat level is {threat_level}.

**The Attack Playbook (How hackers actually work):**

**Phase 1: Reconnaissance**
- Attackers scan your website (just like I did) and catalog the same vulnerabilities
- They use automated tools that run 24/7 looking for easy targets
- Your vulnerabilities are in public databases, so they know exactly what to look for

**Phase 2: Initial Access**
- They exploit your web application vulnerabilities to get their foot in the door
- Critical vulnerabilities like Log4j give them immediate, deep access
- They're not just "visiting" your site - they're moving in

**Phase 3: Escalation and Persistence**
- They install backdoors to maintain access even if you patch some issues
- They escalate their privileges to gain administrative control
- They explore your internal network looking for valuable data

**Phase 4: The Payoff**
- Data theft: Customer information, business secrets, financial records
- Ransomware: Encrypt your files and demand payment
- Business disruption: Take your services offline
- Reputation damage: Use your systems to attack others

**The Reality Check:**
- These aren't theoretical attacks - they happen every day
- Automated tools make it easy for even amateur hackers
- The vulnerabilities I found are exactly what attackers look for

**The Good News:**
Most attackers are opportunistic. They go for the easy targets. Fix your critical and high-severity vulnerabilities, and they'll likely move on to someone else who hasn't secured their systems.

Want me to help you prioritize which vulnerabilities to fix first to break these attack chains?"""
    
    def _generate_prioritization_response(self) -> str:
        """Generate prioritization guidance"""
        severity_summary = self.knowledge_base['severity_summary']
        
        return f"""Great question! Let me break down your security priorities like a triage nurse in an emergency room:

**🚨 CODE RED - Fix Immediately** ({severity_summary.get('Critical', 0)} vulnerabilities)
These are "patient is bleeding out" level urgent. Think complete system compromise, data theft, ransomware - the works.
- **Timeline:** Drop everything and fix these NOW
- **Why:** Attackers can take complete control of your system
- **Business Impact:** Could shut down your entire operation

**🔥 URGENT - Fix This Week** ({severity_summary.get('High', 0)} vulnerabilities)
These are like "broken bones" - serious problems that won't kill you immediately but need prompt medical attention.
- **Timeline:** Schedule dedicated time this week
- **Why:** Significant security breaches are possible
- **Business Impact:** Data theft, service disruption, compliance issues

**⚠️ IMPORTANT - Fix This Month** ({severity_summary.get('Medium', 0)} vulnerabilities)
Think "sprained ankle" - you can still walk, but you're vulnerable and it'll get worse if ignored.
- **Timeline:** Include in your monthly maintenance
- **Why:** These provide stepping stones for more serious attacks
- **Business Impact:** Moderate risk, but could escalate

**ℹ️ ROUTINE - Fix When Convenient** ({severity_summary.get('Low', 0)} vulnerabilities)
These are like "minor cuts" - good to address but won't cause major problems.
- **Timeline:** Include in regular updates
- **Why:** Good security hygiene
- **Business Impact:** Minimal immediate risk

**Pro Tips for Prioritization:**
1. **Internet-facing services first** - A medium vulnerability on your public website is more urgent than a critical one on an internal system
2. **Consider your business** - Vulnerabilities affecting customer data or core business functions get priority
3. **Check for active exploits** - If there are known exploits in the wild, bump up the priority

Which priority level would you like me to dive deeper into? I can give you specific action plans for each category."""
    
    def _generate_explanation_response(self, user_message: str) -> str:
        """Generate explanatory response"""
        message_lower = user_message.lower()
        
        if 'cvss' in message_lower:
            return self._explain_cvss()
        elif 'vulnerability' in message_lower:
            return self._explain_vulnerabilities_general()
        elif 'attack' in message_lower:
            return self._explain_attacks_general()
        else:
            return self._generate_general_response(user_message)
    
    def _explain_cvss(self) -> str:
        """Explain CVSS scoring"""
        return """CVSS stands for Common Vulnerability Scoring System - think of it as a standardized way to measure how dangerous a security vulnerability is.

**The CVSS Scale (0-10):**
- **0.0:** No risk (theoretical only)
- **0.1-3.9:** Low severity - Minor issues, hard to exploit
- **4.0-6.9:** Medium severity - Moderate risk, some skill required to exploit
- **7.0-8.9:** High severity - Serious risk, relatively easy to exploit
- **9.0-10.0:** Critical severity - Extremely dangerous, often easy to exploit

**What goes into the score:**
- How easy is it to exploit?
- What kind of access does an attacker need?
- How much damage can they do?
- How reliable is the exploit?

**Real-world translation:**
- **Critical (9.0+):** "Drop everything and fix this now"
- **High (7.0-8.9):** "Fix this week"
- **Medium (4.0-6.9):** "Fix this month"
- **Low (0.1-3.9):** "Fix when convenient"

The CVSS score helps you prioritize - a 9.8 vulnerability should definitely be fixed before a 5.2 vulnerability.

In your analysis, I use these scores to help you understand which vulnerabilities pose the greatest threat to your system."""
    
    def _explain_vulnerabilities_general(self) -> str:
        """General explanation of vulnerabilities"""
        return """Think of vulnerabilities as security flaws or weaknesses in your software, kind of like cracks in a wall that burglars could use to break in.

**Common types I look for:**

**Web Application Vulnerabilities:**
- SQL Injection: Attackers can manipulate your database
- Cross-Site Scripting (XSS): Malicious code runs in users' browsers
- Authentication bypass: Attackers can log in without proper credentials

**Infrastructure Vulnerabilities:**
- Outdated software with known security flaws
- Misconfigured services that expose sensitive information
- Weak encryption or authentication mechanisms

**Why they matter:**
Every vulnerability is a potential entry point for attackers. Some are like leaving a window unlocked (medium risk), others are like leaving your front door wide open with a welcome mat (critical risk).

**The vulnerability lifecycle:**
1. **Discovery:** Security researchers find the flaw
2. **Disclosure:** The vulnerability gets a CVE number and becomes public
3. **Exploitation:** Attackers start using it (sometimes immediately)
4. **Patching:** Software vendors release fixes
5. **Deployment:** Users apply the patches (this is where many people fall behind)

The key is staying ahead of the attackers by patching vulnerabilities before they can exploit them.

Want me to explain any specific vulnerabilities I found in your system?"""
    
    def _generate_risk_assessment_response(self) -> str:
        """Generate risk assessment"""
        target = self.knowledge_base['target_info'].get('website', 'your website')
        severity_summary = self.knowledge_base['severity_summary']
        total_vulns = self.knowledge_base['target_info'].get('total_vulnerabilities', 0)
        
        # Calculate risk level
        if severity_summary.get('Critical', 0) > 0:
            risk_level = "HIGH RISK"
            risk_color = "🔴"
            risk_explanation = "You have critical vulnerabilities that could lead to complete system compromise."
        elif severity_summary.get('High', 0) > 0:
            risk_level = "MEDIUM-HIGH RISK"
            risk_color = "🟠"
            risk_explanation = "You have high-severity vulnerabilities that pose significant security threats."
        elif severity_summary.get('Medium', 0) > 0:
            risk_level = "MEDIUM RISK"
            risk_color = "🟡"
            risk_explanation = "You have moderate security issues that should be addressed."
        else:
            risk_level = "LOW RISK"
            risk_color = "🟢"
            risk_explanation = "Your security posture is relatively good with only minor issues."
        
        return f"""Let me give you a comprehensive risk assessment for {target}:

**{risk_color} Overall Risk Level: {risk_level}**

{risk_explanation}

**Risk Breakdown:**
- Critical vulnerabilities: {severity_summary.get('Critical', 0)} (Immediate threat)
- High-severity vulnerabilities: {severity_summary.get('High', 0)} (Significant threat)
- Medium-severity vulnerabilities: {severity_summary.get('Medium', 0)} (Moderate threat)
- Low-severity vulnerabilities: {severity_summary.get('Low', 0)} (Minor threat)

**What this means for your business:**

**Immediate Risks:**
- Potential for complete system compromise
- Data theft or ransomware attacks
- Service disruption and downtime
- Compliance violations and legal issues

**Long-term Risks:**
- Reputation damage from security breaches
- Loss of customer trust
- Financial losses from incidents
- Competitive disadvantage

**Risk Mitigation Priority:**
1. Address critical vulnerabilities immediately (within 24 hours)
2. Plan remediation for high-severity issues (within 1 week)
3. Schedule fixes for medium-severity issues (within 1 month)
4. Include low-severity fixes in regular maintenance

**The Bottom Line:**
With {total_vulns} vulnerabilities identified, your system needs attention. However, every vulnerability you fix significantly reduces your overall risk profile.

Want me to help you create a specific action plan to reduce these risks?"""
    
    def _generate_general_response(self, user_message: str) -> str:
        """Generate general helpful response"""
        target = self.knowledge_base['target_info'].get('website', 'your website')
        total_vulns = self.knowledge_base['target_info'].get('total_vulnerabilities', 0)
        
        return f"""I'm here to help you understand and secure {target}! 

Based on my analysis, I found {total_vulns} security issues that we should discuss. I can help you with:

**Understanding Your Vulnerabilities:**
- "What's the most dangerous vulnerability you found?"
- "Explain CVE-2021-44228 in simple terms"
- "What does a CVSS score of 9.8 mean?"

**Getting Things Fixed:**
- "How do I fix the critical vulnerabilities?"
- "What should I patch first?"
- "Walk me through securing my web server"

**Understanding the Threats:**
- "How could someone exploit these vulnerabilities?"
- "What's my overall risk level?"
- "What would happen if I got hacked?"

**Planning Your Security:**
- "Which vulnerabilities are most urgent?"
- "How do I prevent this in the future?"
- "What's a reasonable timeline for fixes?"

I try to explain everything in plain English, not technical jargon. Think of me as your friendly security consultant who actually wants to help you understand and fix things, not just scare you with complicated terms.

What specific aspect of your security would you like to explore? Just ask me naturally - I'm pretty good at understanding what you're looking for!"""
    
    def process_query(self, user_message: str) -> str:
        """Process user query with natural language understanding"""
        
        # Add to conversation history
        self.conversation_history.append({
            'timestamp': datetime.now().isoformat(),
            'user_message': user_message,
            'message_length': len(user_message)
        })
        
        # Extract intent and entities
        intent_analysis = self._extract_intent(user_message)
        
        # Generate contextual response
        response = self._generate_contextual_response(intent_analysis, user_message)
        
        # Add response to history
        self.conversation_history.append({
            'timestamp': datetime.now().isoformat(),
            'bot_response': response,
            'intent_detected': intent_analysis['primary_intent']
        })
        
        return response
    
    def start_interactive_session(self):
        """Start interactive chatbot session"""
        print("="*80)
        print("🤖 SECURECHAIN SMART VULNERABILITY CONSULTANT")
        print("="*80)
        print("🧠 Natural Language Processing: Enabled")
        print("💬 Conversational AI: Active")
        print("🔒 Privacy: All processing happens locally")
        
        print("\n" + self.process_query("hello"))
        print("\nType 'quit' or 'exit' to end the session.")
        print("="*80)
        
        while True:
            try:
                user_input = input("\n💬 You: ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'bye', 'goodbye']:
                    print("\n👋 Thanks for using SecureChain! Stay secure and keep those systems patched!")
                    break
                
                if not user_input:
                    print("I'm here to help! Ask me anything about your security analysis.")
                    continue
                
                print("\n🤖 SecureChain AI: ", end="")
                print("(analyzing your question...)", end="", flush=True)
                print("\r🤖 SecureChain AI: ", end="")
                
                response = self.process_query(user_input)
                print(response)
                
            except KeyboardInterrupt:
                print("\n\n👋 Session ended. Stay secure!")
                break
            except Exception as e:
                logger.error(f"Error: {e}")
                print(f"\n❌ I encountered an error processing your question. Could you try rephrasing it?")

def main():
    """Main function"""
    print("🚀 Starting SecureChain Smart Vulnerability Chatbot...")
    
    # Get knowledge base file
    if len(sys.argv) > 1:
        kb_file = sys.argv[1]
    else:
        kb_files = list(Path(".").glob("*_chatbot_kb.json"))
        if kb_files:
            kb_file = str(sorted(kb_files)[-1])
            print(f"📚 Using knowledge base: {kb_file}")
        else:
            print("❌ No knowledge base file found.")
            print("   Run: python complete_website_analysis.py <website> first")
            sys.exit(1)
    
    try:
        chatbot = SmartVulnerabilityChatbot(kb_file)
        chatbot.start_interactive_session()
    except Exception as e:
        logger.error(f"Error starting chatbot: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()